openapi: 3.0.3
info: 
  title: 24karat
  description: -------------------------
  version: 1.0.0
  contact:
    email: 109taha@gmail.com
  license:
    name: Apache 2.0
    url: http://apache.org/
schemes:
 - https
servers:
  - url: http://localhost:5000/v1
tags:
  - name: User
    description: Every api of user
  - name: Admin
    description: Every api of Admin
  - name: Designer
    description: Every api of Designer
  - name: Order
    description: Every api of Order
Access-Control-Allow-Origin: https://karat24-729ae30fe3a2.herokuapp.com/
Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS
Access-Control-Allow-Headers: Content-Type, Authorization


paths:
  /register:
    post:
      tags:
        - User 
      summary: for Creating User
      description: this api is used For registerd a user
      requestBody:
        description: Create a new user in the deshboard
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
        '405':
          description: Invalid input

  /login:
    post:
      tags:
       - User
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid username/password supplied


  /delete/{userId}:
    delete:
      tags:
        - User
      summary: Delete user
      description: This can only be done by the logged-in user.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: The ID of the user that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted successfully
        '400':
          description: Invalid username supplied
        '404':
          description: User not found


  /registerAdmin:
    post:
      tags:
        - Admin 
      summary: for Creating admin
      description: this api is used For registerd a admin
      requestBody:
        description: Create a new admin in the deshboard
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Admin'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'          
        '405':
          description: Invalid input

  /loginAdmin:
    post:
      tags:
       - Admin
      summary: Logs user into the system
      description: ''
      operationId: login admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid username/password supplied

  /designer/Register:
    post:
      security:
        - BearerAuth: [] 
      tags:
        - Designer
      summary: for Creating User
      description: this api is used For registerd a user
      requestBody:
        description: Create a new user in the deshboard
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Designer'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Designer'          
        '405':
          description: Invalid input
  /designer/Login:
    post:
      tags:
       - Designer
      summary: Logs user into the system
      description: ''
      operationId: login User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid username/password supplied

  /deleteDesigner/{DesignerId}:
    delete:
      tags:
        - Designer
      summary: Delete Designer
      description: This can only be done by the logged-in Designer.
      operationId: Delete Designer
      parameters:
        - name: DesignerId
          in: path
          description: The ID of the Designer that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Designer deleted successfully
        '400':
          description: Invalid username supplied
        '404':
          description: Designer not found

  /getAllDesginer:
    get:
      security:
        - BearerAuth: [] 
      tags:
        - Designer
      summary: Get all Designer
      description: Retrieve a list of all users.
      operationId: getAllUsers
      responses:
        '200':
          description: A list of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Designer' # Assuming you have a 'User' schema defined in 'components/schemas'
        '500':
          description: Internal server error

  /projectDigitizing:
    post:
      tags:
        - Digitizing 
      summary: for Creating Digitizing
      description: this api is used For Creating Digitizing
      requestBody:
        description:  Creating a new Digitizing order in the deshboard
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Digitizing'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Digitizing'          
        '405':
          description: Invalid input

  /digitizing:
    get:
      security:
        - BearerAuth: [] 
      tags:
        - Digitizing 
      summary: Get all digitizing
      description: Retrieve a list of all digitizing.
      operationId: Get All Digitizing
      responses:
        '200':
          description: A list of digitizing.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Digitizing' # Assuming you have a 'User' schema defined in 'components/schemas'
        '500':
          description: Internal server error

  /digitizing/{userId}:
    get: 
      tags:
        - Digitizing 
      summary: Get users digitizing
      description: Retrieve a list of users digitizing.
      operationId: Get Users Digitizing
      parameters:
        - name: userId
          in: path
          description: The ID of the User who send req
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of digitizing.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Digitizing' # Assuming you have a 'User' schema defined in 'components/schemas'
        '500':
          description: Internal server error


  /projectVector:
    post:
      tags:
        - Vector 
      summary: for Creating Vector
      description: this api is used For Creating Vector
      requestBody:
        description:  Creating a new Vector order in the deshboard
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vector'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vector'          
        '405':
          description: Invalid input

  /Vector:
    get:
      security:
        - BearerAuth: [] 
      tags:
        - Vector
      summary: Get all Vector
      description: Retrieve a list of all Vector.
      operationId: All Digitizing
      responses:
        '200':
          description: A list of Vector.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vector' # Assuming you have a 'User' schema defined in 'components/schemas'
        '500':
          description: Internal server error

  /Vector/{userId}:
    get: 
      tags:
        - Vector
      summary: Get users Vector
      description: Retrieve a list of users Vector.
      operationId: Users Vector
      parameters:
        - name: userId
          in: path
          description: The ID of the User who send req
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of Vector.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vector' # Assuming you have a 'User' schema defined in 'components/schemas'
        '500':
          description: Internal server error

  /projectGraphices:
    post:
      tags:
        - Graphic 
      summary: for Creating Graphic
      description: this api is used For Creating Graphic
      requestBody:
        description:  Creating a new Graphic order in the deshboard
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Graphic'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Graphic'          
        '405':
          description: Invalid input

  /Graphices:
    get:
      security:
        - BearerAuth: [] 
      tags:
        - Graphic
      summary: Get all Graphic
      description: Retrieve a list of all Graphic.
      operationId: Get All Graphic
      responses:
        '200':
          description: A list of Graphic.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Graphic' # Assuming you have a 'User' schema defined in 'components/schemas'
        '500':
          description: Internal server error

  /Graphices/{userId}:
    get: 
      tags:
        - Graphic
      summary: Get users Graphic
      description: Retrieve a list of users Graphic.
      operationId: Users graphics
      parameters:
        - name: userId
          in: path
          description: The ID of the User who send req
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of Graphic.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Graphic' # Assuming you have a 'User' schema defined in 'components/schemas'
        '500':
          description: Internal server error

  /order:
    get:
      security:
        - BearerAuth: [] 
      tags:
        - Order
      summary: Get all Order
      description: Retrieve a list of all Order.
      operationId: Get All Order
      responses:
        '200':
          description: A list of Order.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Orders' # Assuming you have a 'User' schema defined in 'components/schemas'
        '500':
          description: Internal server error
  
  /pendingOrder:
    get:
      security:
        - BearerAuth: [] 
      tags:
        - Order
      summary: Get all pending Order
      description: Retrieve a list of all Order.
      operationId: All Order
      responses:
        '200':
          description: A list of Order.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Orders' # Assuming you have a 'User' schema defined in 'components/schemas'
        '500':
          description: Internal server error
  
  /inprocessOrder:
    get:
      security:
        - BearerAuth: [] 
      tags:
        - Order
      summary: Get all Inprocess Order
      description: Retrieve a list of all inprocess Order.
      operationId: All inprocess  Order
      responses:
        '200':
          description: A list of inprocess Order.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Orders' # Assuming you have a 'User' schema defined in 'components/schemas'
        '500':
          description: Internal server error


  /completedOrder:
    get:
      security:
        - BearerAuth: [] 
      tags:
        - Order
      summary: Get all completed Order
      description: Retrieve a list of all completed Order.
      operationId: All completed Order
      responses:
        '200':
          description: A list of completed Order.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Orders' # Assuming you have a 'User' schema defined in 'components/schemas'
        '500':
          description: Internal server error

  /cancelledOrder:
    get:
      security:
        - BearerAuth: [] 
      tags:
        - Order
      summary: Get all cancel Order
      description: Retrieve a list of all cancel Order.
      operationId: All canceled Order
      responses:
        '200':
          description: A list of cancel Order.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Orders' # Assuming you have a 'User' schema defined in 'components/schemas'
        '500':
          description: Internal server error


  /OrderUser/{userId}:
    get:
      tags:
        - Order
      summary: Get all users Order
      description: Retrieve a list of all user Order.
      operationId: Get all users Order
      parameters:
        - name: userId
          in: path
          description: The ID of the User who send req
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of user Order.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Orders' # Assuming you have a 'User' schema defined in 'components/schemas'
        '500':
          description: Internal server error

  /createTask:
    post:
      security:
        - BearerAuth: [] 
      tags:
        - TaskAssign 
      summary: for  Task Assign
      description: this api is use for Task Assign
      requestBody:
        description:  Creating a new Task in the deshboard
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskAssign'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskAssign'          
        '405':
          description: Invalid input

  /getAllTask:
    get:
      security:
        - BearerAuth: [] 
      tags:
        - TaskAssign
      summary: Get all Task Assign
      description: Retrieve a list of all Task Assign.
      operationId: Get Task Assign
      responses:
        '200':
          description: A list of user Order.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskAssign' # Assuming you have a 'User' schema defined in 'components/schemas'
        '500':
          description: Internal server error

  /getTask/{userId}:
    get:
      tags:
        - TaskAssign
      summary: Get all users Task Assign
      description: Retrieve a list of all user Task Assign.
      operationId: Get All Task Assign
      parameters:
        - name: userId
          in: path
          description: The ID of the User who send req
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of user Task Assign.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskAssign' # Assuming you have a 'User' schema defined in 'components/schemas'
        '500':
          description: Internal server error

  /desginerRep/{designerId}:
    post:
      tags:
        - orderCompleted 
      summary: for  Task completion form designer
      description: this api is use for Task Assign. In this api designer add the source file which is created by him and send to admin
      parameters:
        - name: designerId
          in: path
          description: The ID of the User who send req
          required: true
          schema:
            type: string
      requestBody:
        description:  sending a source file in the deshboard
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/orderCompleted'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orderCompleted'          
        '405':
          description: Invalid input

  /prices:
    post:
      tags:
        - PriceingProject 
      summary: for  Task completion form admin
      description: In this api admin add prices and send to the user that your project is ready pay that amount and the project is send to you
      requestBody:
        description:  sending Priceing Project in the deshboard
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriceingProject'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceingProject'          
        '405':
          description: Invalid input

  /paymentuser:
    post:
      tags:
        - paymentInprocess 
      summary: payment Inprocess with the hand of user
      description: in this api user have an url link which is saved in the data base automatically
      requestBody:
        description:   payment Inprocess of Project in the deshboard
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/paymentInprocess'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentInprocess'          
        '405':
          description: Invalid input

  /payment:
    post:
      tags:
        - paymentCompleted 
      summary: payment Completed
      description: in this api user payment Completed and the user got an source file
      requestBody:
        description:  sending Priceing Project in the deshboard
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/paymentCompleted'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentCompleted'          
        '405':
          description: Invalid input

  /EstimateReq:
    post:
      tags:
        - Estimate 
      summary: Estimate
      description: creating an estimate req by user for getting an price and time duration of patches
      requestBody:
        description:  Estimate for patches
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patches'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patches'          
        '405':
          description: Invalid input
  /Response:
    post:
      tags:
        - Estimate 
      summary: Estimate reply byh admin
      description: creating an estimate reply by admin in which price and time duration of patches are added
      requestBody:
        description:  Estimate for patches
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EstimateRepByAdmin'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EstimateRepByAdmin'          
        '405':
          description: Invalid input

  /AllEstimate:
    get:
      security:
        - BearerAuth: [] 
      tags:
        - Estimate
      summary: Get all estimate for replyies
      description: Retrieve a list of all user estimates.
      operationId: Get All estimates
      responses:
        '200':
          description: A list of user estimates.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Patches' 
        '500':
          description: Internal server error
components:

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: The auto-generated id
          example: 12321j4vj15vj123b5
        firstname:
          type: string
          description: The first name
          example: Jhon
        lastname:
          type: string
          description: The last name
          example: Dou
        email:
          type: string
          description: The email
          example: JhonDou@gmail.com
        password:
          type: string
          description: The password
          example: Password123
        address:
          type: string
          description: The address
          example: 123street 235 housenumber
        city:
          type: string
          description: The city
          example: Tokyo
        country:
          type: string
          description: The country
          example: Japan
        postalCode:
          type: string
          description: The postal code
          example: 123456
        phone:
          type: string
          description: The phone number
          example: 123456789

    Admin:
      type: object
      properties:
        email:
          type: string
          description: The email
          example: Admin@example.com
        password:
          type: string
          description: The password
          example: AdminPassword123

    Designer:
      type: object
      properties:
        id:
          type: string
          description: The auto-generated id
          example: 12321j4vj15vj123b5
        firstname:
          type: string
          description: The first name
          example: Jhon
        lastname:
          type: string
          description: The last name
          example: Dou
        email:
          type: string
          description: The email
          example: JhonDou@gmail.com
        password:
          type: string
          description: The password
          example: Password123
        address:
          type: string
          description: The address
          example: 123street 235 housenumber
        city:
          type: string
          description: The city
          example: Tokyo
        country:
          type: string
          description: The country
          example: Japan
        postalCode:
          type: string
          description: The postal code
          example: 123456
        phone:
          type: string
          description: The phone number
          example: 123456789
    Digitizing:
      type: object
      properties:
        userId:
          type: string
          description: The auto-generated userid
          example: 12321j4vj15vj123b5
        DesignName:
          type: string
          description: The Design Name
          example: example 1
        NumberOfColors:
          type: number
          description: The Number Of Colors
          example: 3
        NameOfColors:
          type: string
          description: The Name Of Colors
          example: red green blue
        Height:
          type: string
          description: The Height
          example: 12
        Width:
          type: string
          description: The Width
          example: 12
        Unit:
          type: string
          description: The Unit
          example: Mm
          enum: 
            - Inches
            - Mm
            - Cm
        type:
          type: string
          description: The type
          example: Mm
          enum: 
            - Fabric/Garments
            - Cotton
            - Ployester
            - Ploy/Cotton Blends
            - Polo
            - Twill
            - Fleece
            - Denim
            - Knit
            - Silk
            - Nylon
            - Others
        designPalcments:
          type: string
          description: The design Palcments
          example: Mm
          enum: 
            - Cap
            - Cap-back
            - Cap-front
            - Cap-side
            - Jacket-back
            - Left-chest
            - Sleeves
            - Other
        appliques:
          type: boolean
          description: The Width
          example: 12
        designFormate: 
          type: string
          description: The design Formate
          enum: 
            - Tajima (*.DST)
            - Melco (*.CND)
            - Melco (*.EXP)
            - Deco, Brother, Babylock  (*.PES)
            - Wilcom (*.EMB)
            - Wilcom V9 (*.EMB)
            - Wilcom ESS (*.ESS)
            - Wilcom ESL (*.ESL)
            - Wilcom PLauen (*.T10)
            - Wilcom Saurer (*.T15)
            - Hiraoka DAT (*.DAT)
            - Hiraoka VEP (*.VEP)
            - Saurer SLC (*.SAS)
            - Time and Space MJD (*.MJD)
            - Barudan (*.DSB)
            - ZSK (*.DSZ)
            - ZSK TC(*.Z??)
            - Toyota (*.10O)
            - Barudan (*.U??)
            - Pfaff (*.KSM)
            - Happy (*.TAP)
            - Tajima (*.T01)
            - Barudan (*.T03)
            - Zangs (*.T04)
            - ZSK (*.T05)
            - Compucon (*.XXX)
            - Artista Design V4.0 (*.ART)
            - Artista Design V3.0 (*.ART)
            - Artista Design V2.0 (*.ART)
            - Artista Design V1.0 (*.ART)
            - Explorations Projects (*.ART42)
            - Explorations Tamplates (*.AMT42)
            - Janome/Elna/Kenmore (*.SEW)
            - Janome/Elna/Kenmore (*.JEF)
            - Husqvarna/Viking (*.HUS)
            - Deco, Brother, Babylock (*.PEC)
            - Pfaff (*.PCD)
            - Pfaff (*.PCQ)
            - Poem, Huskygram, Singer (*.CSD)
            - Pxf
            - Ofm
        timeFrame: 
          type: string
          description: The time Frame
          enum: 
            - Normal turn-around
            - "Urgent turn-around: {1-12 hours}, addition 5$"
        autoThreadCutting: 
          type: string
          description: The auto Thread Cutting
          enum: 
            - CUT THREAD LONGER THAN 2 MM
            - CUT ALL CONNECTION THREADS
            - DO NOT CUT THREADS
        additionalInstructions: 
          type: string
          description: The additional Instructions
        attachArtwork: 
          type: string
          description: The attach Artwork
  
    Graphic:
      type: object
      properties:
        userId:
          type: string
          description: The auto-generated userid
          example: 12321j4vj15vj123b5
        DesignIdea:
          type: string
          description: The Design Idea
          example: example 1
        NumberOfColors:
          type: number
          description: The Number Of Colors
          example: 3
        NameOfColors:
          type: string
          description: The Name Of Colors
          example: red green blue
        type:
          type: string
          description: The type
          example: Mm
          enum: 
            - Logo 
            - Banner 
            - Visiting Card
            - Letter Head
            - Stationery
            - Penaflex
            - Other
        timeFrame: 
          type: string
          description: The time Frame
          enum: 
            - Normal turn-around
            - "Urgent turn-around: {1-12 hours}, addition 5$"
        additionalInstructions: 
          type: string
          description: The additional Instructions
        attachArtwork: 
          type: string
          description: The attach Artwork

    Vector:
      type: object
      properties:
        userId:
          type: string
          description: The auto-generated userid
          example: 12321j4vj15vj123b5
        DesignName:
          type: string
          description: The Design Name
          example: example 1
        NumberOfColors:
          type: number
          description: The Number Of Colors
          example: 3
        NameOfColors:
          type: string
          description: The Name Of Colors
          example: red green blue
        Height:
          type: string
          description: The Height
          example: 12
        Width:
          type: string
          description: The Width
          example: 12
        Unit:
          type: string
          description: The Unit
          example: Mm
          enum: 
            - Inches
            - Mm
            - Cm
        whatWillYouUseIfFor:
          type: string
          description: The what Will You Use It For
          example: Mm
          enum: 
            - Screen Printing
            - Direct To Garment
            - Sublimation
            - Vinyl Cutting
            - Laser Engraving
            - Denim
            - Sand Blasting
            - Diamond Drag Engraving
            - Other
        colorScheme:
          type: string
          description: The color Scheme
          example: Mm
          enum: 
            - Black & White
            - Black & White With Halftones
            - Spot Color With NO Halftones
            - Spot Color With Halftones
            - Others
        designFormate:
          type: string
          description: The design Formate
          example: .pdf
          enum: 
            - .ai
            - .pdf
            - .crd
            - .eps
            - .psd
            - .svg
            - Other
        timeFrame:
          type: string
          description: The time Frame
          enum: 
            - Normal turn-around
            - "Urgent turn-around: {1-12 hours}, addition 5$"
        additionalInstructions: 
          type: string
          description: The additional Instructions
        attachArtwork: 
          type: string
          description: The attach Artwork
    Patches:
      type: object
      properties:
        userId:
          type: string
          description: The auto-generated userid
          example: 12321j4vj15vj123b5
        DesignName:
          type: string
          description: The Design Name
          example: example 1
        Quantity:
          type: number
          description: The Quantity
          example: 3
        NumberOfColors:
          type: number
          description: The Number Of Colors
          example: 3
        NameOfColors:
          type: string
          description: The Name Of Colors
          example: red green blue
        Height:
          type: string
          description: The Height
          example: 12
        Width:
          type: string
          description: The Width
          example: 12
        Unit:
          type: string
          description: The Unit
          example: Mm
          enum: 
            - Inches
            - Mm
            - Cm
        type:
          type: string
          description: The type
          example: Mm
          enum: 
            - Embroidered Patches
            - Chenille Patches
            - Enamel Pins
            - Challenge Coins
            - Tackle Twill Patches
            - Applique Patches
            - Leather Patches
            - PVC/ Rubber Patches
            - Printed/ Sublimated Patches
            - Woven Patches
            - Sequin Patches
            - Ebroidered Keychains
            - Chenille Keychains
            - Leather Keychains
            - PVC/ Rubber Keychains
            - Printed Keychains
            - Woven Keychains
            - Face Masks
            - Costom Socks
        designPalcments:
          type: string
          description: The design Palcments
          example: Mm
          enum: 
            - Iron On/ Heat Seal
            - Velcro (Both Hook & Loop)
            - Peel & Stick / Self Adhesive", "Sew On
        timeFrame:
          type: string
          description: The time Frame
          enum: 
            - "sample: {1-2 days}"
            - "normal turn-around: {15-22 days}"
            - "urgent turn-around: {8-15 days}"
        autoThreadCutting:
          type: string
          description: The auto Thread Cutting
          enum: 
            - CUT THREAD LONGER THAN 2 MM
            - CUT ALL CONNECTION THREADS
            - DO NOT CUT THREADS
        additionalInstructions: 
          type: string
          description: The additional Instructions
        attachArtwork: 
          type: string
          description: The attach Artwork

    EstimateRepByAdmin:
      type: object
      properties:
        estimateId: 
          type: string
          description: you have to provide an estimate id
        prices: 
          type: string
          description: you have to provide a prices of that estimate
        timeDuration: 
          type: string
          description: you have to provide a time of completion
        

    Orders:
      type: object
      properties:
        userId:
          type: string
          description: you have to prive an id of user!
        projectId:
          type: string
          description:  you have to prive an id of project
        orderType: 
          type: string
          description: optional instruction if you want to send anything to designer
          enum: 
            - Digitizing
            - Graphices
            - Vactor
        status:
          type: string
          description: by default its pending when the admin assign the task status change to in-process automactically
          example: Pending
          enum: 
            - Pending
            - In-Process
            - Completed
            - Cancelled

    TaskAssign:
      type: object
      properties:
        orderId:
          type: string
          description: you have to prive an id of order!
          example: 1235421jkugc
        designerId:
          type: string
          description:  you have to prive an id of designer
          example: rj1hv4j12g4j1
        Instruction: 
          type: string
          description: optional instruction if you want to send anything to designer

    orderCompleted:
      type: object
      properties:
        TaskId:
          type: string
          description: you have to prive an id of order!
          example: 123b1hj41b4
        designerId:
          type: string
          description:  you have to add id of designer in params
          example: qg321jhv43545
        JPGFile:
          type: string
          description:  prototype of the project which we can show to user
          example: jpg file
        SourceFile: 
          type: string
          description: zip file the file of data and content of project
          example: zip file
        Instruction: 
          type: string
          description: optional instruction if you want to send anything to admin
    
    PriceingProject:
      type: object
      properties:
        orderCompleted:
          type: string
          description: you have to provide an id of order!
          example: 123b1hj41b4
        TaskId:
          type: string
          description:  you dont have to add id of task
        userId:
          type: string
          description:  you dont have to provide an id of user
        Instruction: 
          type: string
          description: optional instruction if you want to send anything to user
        prices: 
          type: number
          description: you have to add prices
          example: 6541321

    paymentInprocess:
      type: object
      properties:
        userId:
          type: string
          description: you have to provide an id of user
          example: 123b1hj41b4
        designerId:
          type: string
          description:  you dont have to add id of designer
        orderCompleted:
          type: string
          description:  you have to provide an id of order
          example: g123jhb421b4
        TaskId: 
          type: string
          description: you dont have to provide an id of task
        prices: 
          type: number
          description: prices show to user
          example: 6541321
        stripe_url: 
          type: string
          description: stripe payment url saved automactically

    paymentCompleted:
      type: object
      properties:
        payment:
          type: string
          description: you have to send payment in process id
          example: 123b1hj41b4
        userId:
          type: string
          description:  you dont have to add id of user
        TaskId: 
          type: string
          description: you dont have to provide an id of task
        paymentStatus: 
          type: boolean
          description: auto true if user payed
        session_id: 
          type: string
          description: you have to provide an session_id when backend get Session_id the source file send to user
          example: 6541321